- toggle chat interface [X]
- bubbles :
    - text to a singleton [X]
    - hiding routine [X]
    - fix input bugs [X]
    - block input until current bubble disappears [X]
        - block camera input []
- refactor Vue components (script setup) [X]
- Vue components ts-style typing [X]
- basic interclient server comms :
    - share socket instance between vue components [X]
    - send chat messages from babylon game [X]
    - report new coordinates on movement [X]
    - comm data structures  []
        - Assign locator from backend [X]
        - remotePlayers array that registers server reports about the other players in the world[X]
    - share socket event types interfaces between client and server side [X]
- Conditionally start the metaverse after player data and assets are loaded (loading?) [X]
- refactor game/*ts []
    - proper asynchronicity [X]
    - GENERAL REFCTRNG []
    - Create generic game entity [] <-- crucial for world spawning ...
    - Make localplayer extend entity []
    - Make remoteplayer extend entity []
    - Create playerData class for db interaction [X]
- deep interclient comms []
    - make other players state entity and appear in the world, update [X]
    - print out in the player's corresponding bubble [] <---
    - update orientation [x]
    - load proper character asynchronously []
    - update animation state []
    - make a server limit, administrate locators so that the players are accessed directly []
    - clean structures on disconnect[]
    - remove extracube [X]
- World triggers []
- Pop up system[]
- Fix when the first request is made from the connection manager in the frontend[X]
- Apply ready() pattern for asynchronous resources []  <---- SUPERIMPORTANT
- click ray identify player []